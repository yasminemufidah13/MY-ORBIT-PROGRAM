# -*- coding: utf-8 -*-
"""Copy of KM-05: Functions, OOP, Time Complexity .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nMm2Gqnn7T3WP1XRtLrJF_euBa1Q3tNG

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

def cetak(K):
  print(K)

cetak("hi, welcome to the world program")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

def kurang(a, b):
  return a - b;

print(kurang(16, 2))

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

class Harimau(object):
  def aaauugghh(self):
    print("aaauugghh")

tiger = Harimau()
tiger.aaauugghh()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

tambah = lambda c, d: (c + d)
print(tambah(20, 5))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

class Barang:
  def __init__(self, nama, jumlah, harga, jenis):
    self.nama = nama
    self.jumlah = jumlah
    self.harga = harga
    self.jenis = jenis

  def myfunc(self):
    print("Jual barang " + self.nama)
  
  def info(self):
    print(f"nama: {self.nama}, jumlah: {self.jumlah}, harga: {self.harga}, jenis: {self.jenis}")

barang1 = Barang("sepatu",  1, "450.000", "reebok")

barang1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

barang1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

class Sepatu(Barang):
  def __init__(self,  nama, jumlah, harga, jenis, warna, jenis_sepatu):
    super().__init__(nama, jumlah, harga, jenis)
    self.warna = warna
    self.jenis_sepatu = jenis_sepatu 

  def info_sepatu(self):
    print(f"warna: {self.warna}, jenis sepatu: {self.jenis_sepatu}")

barang1 = Sepatu("sepatu", 1, "450.000", "reebok", "merah", "sport")

barang1.info()
barang1.info_sepatu()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

class Beruang(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, habitat, jenis_makanan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.habitat = habitat
    self.jenis_makanan = jenis_makanan

  def info_ikan(self):
    print(f"warna: {self.warna}, habitat: {self.habitat}, jenis makanan: {self.jenis_makanan}")

bear1 = Beruang("Greez", 10, "omnivora", True, "Coklat", "Hutan", "Madu")

bear1.info()
bear1.info_ikan()
bear1.tidur(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1 = Big O(2) = O(1)

arr = [1, 2, 3, 4, 5]

print(arr[0])     #O(1)
print(arr[1])     #O(1)

# 2 = Big O (n+3) = O(n)

print(arr[2])       #O(1)
for number in arr:  #O(n)
  print(number)
print(arr[1])       #O(1)
print(arr[2])       #O(1)

#Maka yang diambil yang paling besar yaitu O(n)

# 3 = Big O (2n+1) = O(n)

arr2 = [6, 7, 8, 9, 10]

for number in arr:    #O(n)
  print(number)
for number in arr2:   #O(n)
  print(number)
print(arr2[4])        #O(1)
#Maka yang diambil yang paling besar yaitu O(2n)

# 4 = Big O (2n+1) = O(n)

print(arr2[1])        #O(1)
for number in arr:    #O(n)
  print(number)
for number in arr:    #O(n)
  print(number)

#Maka yang diambil yang paling besar yaitu O(2n)

# 5 = Big O (2n+2) = O(n)

for number in arr:      #O(n)
  for number2 in arr2:  #O(n)
    print(number+number2)
print(arr[1]+arr2[1])   #O(1)
print(arr2[2])          #O(1)

#Maka yang diambil yang paling besar yaitu O(2n)

# 6 = Big O (2n+1) = O(n)

for number in arr:          #O(n)
  for number2 in arr:       #O(n)
    print(number+number2)   #O(1)
print(arr)

#Maka yang diambil yang paling besar yaitu O(2n)

# 7 + = Big O (3n+3) = O(n)

for number in arr:          #O(n)
  for number2 in arr2:      #O(n)
    for number3 in arr:     #O(n)
      print(number+number2+number3)
print(arr[1])               #O(1)
print(arr2[2])              #O(1)
print(arr2[3])              #O(1)

#Maka yang diambil yang paling besar yaitu O(3n)

# 8 = Big O (3n+1) = O(n)

for number in arr:        #O(n)
  print(number)
print(arr2)
for number in arr:        #O(n)
  for number2 in arr2:    #O(n)
    print(number+number2) #O(1)
print(arr)

#Maka yang diambil yang paling besar yaitu O(3n)

# 9 

# algoritma bubble sort

def bubbleSort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n-1):
    # range(n) also work but outer loop will repeat one time more than needed.
 
        # Last i elements are already in place
        for j in range(0, n-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j + 1] :
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
 
# Driver code to test above
arr = [64, 34, 25, 12, 22, 11, 90]
 
bubbleSort(arr)
 
print ("Sorted array is:")
for i in range(len(arr)):
    print ("% d" % arr[i]),

# 10
def search(arr, x):
  
    for i in range(len(arr)):
  
        if arr[i] == x:
            return i
  
    return -1

# 11

# algoritma binary search
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
 
    while low <= high:
 
        mid = (high + low) // 2
 
        # If x is greater, ignore left half
        if arr[mid] < x:
            low = mid + 1
 
        # If x is smaller, ignore right half
        elif arr[mid] > x:
            high = mid - 1
 
        # means x is present at mid
        else:
            return mid
 
    # If we reach here, then the element was not present
    return -1
 
 
# Test array
arr = [ 2, 3, 4, 10, 40 ]
x = 10
 
# Function call
result = binary_search(arr, x)
 
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")

#Hallo Yasmine, Adel izin buat menambahkan program OOP di sini ya 
## **Encapsulation**
class Sapi:
  def __init__(self, nama, usia, jenis_kelamin, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.jenis_kelamin = jenis_kelamin
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def moo(self):
    print("mhooooooo... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis kelamin: {self.jenis_kelamin}, warna: {self.warna}, jenis: {self.jenis}")


sapi1 = Sapi("abang", 1, "jantan", "coklat muda", "limosin")

sapi1.info()

## **Abstraction**
sapi1.myfunc()

## **Inheritence**
class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()


class Sapi(Binatang):
  def __init__(self,  nama, usia, jenis_kelamin, mamalia, warna, jenis_sapi):
    super().__init__(nama, usia, jenis_kelamin, mamalia)
    self.warna = warna
    self.jenis_sapi = jenis_sapi
  
  def moo(self):
    print("mhoooooo....")

  def info_sapi(self):
    print(f"warna: {self.warna}, jenis sapi: {self.jenis_sapi}")

cow1 = Sapi("mipan", 1.5, "betina", True, "putih hitam", "perah")

cow1.info()
cow1.info_sapi()

## **Polymorphism**
class Tumbuhan(object):
  def __init__(self, nama, usia, jenis_tumbuhan):
    self.nama = nama
    self.usia = usia
    self.jenis_tumbuhan = jenis_tumbuhan

  def tidur(self, durasi):
    for x in range(durasi):
      print("bbrrrr... bbrrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis_tumbuhan}")


plant1 = Tumbuhan("Atang", 3.5, "Umbi-umbian")

plant1.info()

class Kentang(Tumbuhan):
  def __init__(self,  nama, usia, warna, jenis_sayuran, jenis_tumbuhan):
    super().__init__(nama, usia, jenis_tumbuhan)
    self.warna = warna
    self.jenis_sayuran = jenis_sayuran

  def tumbuh(self, durasi):
    for x in range(durasi):
      print("hallo... aku adalah kentang yang sehat... ")

  def info_kentang(self):
    print(f"warna: {self.warna}, jenis kentang: {self.jenis_sayuran}")

potato1 = Kentang("Atang", 3.5 , "cokelat muda terang", "Russet", "Umbi-umbian")

potato1.tidur(3)
print()
potato1.info()
potato1.info_kentang()
potato1.tumbuh(2)
#Sudah Yasmine, terima kasih banyak untuk kolaborasinya :)
